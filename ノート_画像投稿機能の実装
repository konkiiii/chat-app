・Active Storageの導入
  ・ImageMagick(画像加工ツールの導入)をインストールする
    % brew install imagemagick (ターミナル)
     ※VScodeのターミナルで実装するとエラーが起きるのでMac側のターミナルで実装する
  ・Gemをインストール
    ※Gemfileの一番下に記述
    gem 'mini_magick'
    gem 'image_processing', '~> 1.2'

    % bundle install （ターミナル）
    ローカルサーバーを再起動する
  ・Active Storageをインストールする
    % rails active_storage:install
    % rails db:migrate
  
・画像を保存する
  ・Active StorageのテーブルとMessagesテーブルのアソシエーションを定義
    ・has_one_attachedメソッド
      class モデル < ApplocationRecord
        has_one_attached :ファイル名(添付するファイルがわかる名前にする)
      end
    app/models/message.rbに記述
    has_one_attached :image
  ・messages_controller.rbにて、imageカラムの保存を許可
  ・画像の保存を許可するストロングパラメーターを記述
    def message_params
      params.require(:message).permit(:content, :image).merge(user_id: current_user.id)
    end
    app/controllers/messages_controller.rbに記述(privateの下に)

・保存した画像を表示する
  ・image_tagメソッド(ビューに記述)
    img要素を生成するヘルパーメソッド
    # ファイルをモデルから指定する場合
      <%= image_tag モデル.画像ファイル %>
      <%= image_tag user.avatar %>
    # app/assets/ディレクトリ下の画像ファイルパスでも指定できる
      <%= image_tag 画像ファイルのパス %>
      <%= image_tag "avatar.png" %>
    ・app/views/messages/_message.html.erbに記述
      <%= image_tag message.image, class: 'message-image' %>
  ・attached? メソッド(ビューに記述)
    レコードにファイルが添付されているかどうかで、trueかfalseを返すメソッド
    # 記述例
    モデル.ファイル名.attached?
      <%= image_tag message.image, class: 'message-image'if message.image.attached? %>
  ・画像の大きさを調節する
  ・variantメソッド
    画像の大きさを調整するメソッド
    #記述名
    モデル名.ファイル名.variant(resize: '幅x高さ')
    ※x はエックスを使用する
  <%= image_tag message.image.variant(resize: '500x500'), class: 'message-image'if message.image.attached? %>

  